// Code generated by schemagen; DO NOT EDIT.

package parse_test

import (
	"fmt"
	"github.com/metafates/schema/optional"
	"github.com/metafates/schema/required"
	validate "github.com/metafates/schema/validate"
	"github.com/metafates/schema/validate/charset"
	"time"
)

// Ensure that [UserWithGen] type was not changed
func _() {
	type locked struct {
		ID             required.UUID[string]
		Name           required.Charset[string, charset.Print]
		Birth          optional.InPast[time.Time]
		FavoriteNumber int
		Friends        []Friend
	}
	var v UserWithGen
	// Compiler error signifies that the type definition have changed.
	// Re-run the schemagen command to regenerate this file.
	_ = locked(v)
}

// TypeValidate implements the [validate.TypeValidateable] interface.
func (x *UserWithGen) TypeValidate() error {
	err0 := validate.Validate(&x.ID)
	if err0 != nil {
		return validate.ValidationError{Inner: err0}.WithPath(fmt.Sprintf(".ID"))
	}
	err1 := validate.Validate(&x.Name)
	if err1 != nil {
		return validate.ValidationError{Inner: err1}.WithPath(fmt.Sprintf(".Name"))
	}
	err2 := validate.Validate(&x.Birth)
	if err2 != nil {
		return validate.ValidationError{Inner: err2}.WithPath(fmt.Sprintf(".Birth"))
	}
	for i0 := range x.Friends {
		{
			err3 := validate.Validate(&x.Friends[i0])
			if err3 != nil {
				return validate.ValidationError{Inner: err3}.WithPath(fmt.Sprintf(".Friends[%v]", i0))
			}
		}
	}
	return nil
}
