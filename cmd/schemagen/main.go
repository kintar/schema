package main

import (
	"flag"
	"fmt"
	"go/types"
	"log"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/dave/jennifer/jen"
	"github.com/metafates/schema/optional"
	"github.com/metafates/schema/required"
	"github.com/metafates/schema/validate"
	"golang.org/x/tools/go/packages"
)

//go:generate schemagen -type MyStruct

type MyStruct struct {
	Name  required.NonEmpty[string]  `json:"name"`
	Birth optional.InPast[time.Time] `json:"birth"`
	Anon  struct{ Foo required.ASCII[string] }
	Map   map[string]required.Any[string]
	Slice [][]map[string]required.Email[string]
	Bio   string
	Ptr   *Other
}

type Other struct {
	ID required.NonEmpty[string]
}

func (x *Other) Validate() error {
	if err := x.ID.Validate(); err != nil {
		return validate.ValidationError{Inner: err}.WithPath("ID")
	}

	return nil
}

// example codegen
func (x *MyStruct) Validate() error {
	if err := x.Name.Validate(); err != nil {
		return validate.ValidationError{Inner: err}.WithPath("Name")
	}

	if err := x.Birth.Validate(); err != nil {
		return validate.ValidationError{Inner: err}.WithPath("Birth")
	}

	if err := x.Anon.Foo.Validate(); err != nil {
		return validate.ValidationError{Inner: err}.WithPath("Anon.Foo")
	}

	for i1 := range x.Slice {
		for i2 := range x.Slice[i1] {
			for k1, v1 := range x.Slice[i1][i2] {
				if err := v1.Validate(); err != nil {
					return validate.ValidationError{Inner: err}.WithPath(fmt.Sprintf("Slice[%v][%v][%v]", i1, i2, k1))
				}
			}
		}
	}

	if x.Ptr != nil {
		if err := x.Ptr.Validate(); err != nil {
			return validate.ValidationError{Inner: err}.WithPath("Ptr")
		}
	}

	return nil
}

type Env struct {
	File string
}

func NewEnv() Env {
	return Env{
		File: os.Getenv("GOFILE"),
	}
}

// Output returns output path for the generated file
func (e Env) Output() string {
	dir := filepath.Dir(e.File)
	ext := filepath.Ext(e.File)
	stem := strings.TrimSuffix(filepath.Base(e.File), ext)

	return filepath.Join(dir, stem+".schema"+ext)
}

func main() {
	// var validate bool
	var names []string

	// flag.BoolVar(&validate, "validate", false, "generate validate method")
	flag.BoolFunc("type", "", func(s string) error { names = append(names, s); return nil })

	flag.Parse()

	env := NewEnv()

	path := "."

	pkgs, err := packages.Load(
		&packages.Config{
			Mode: packages.LoadAllSyntax,
		},
		path,
	)
	if err != nil {
		log.Fatalln(err)
	}

	if packages.PrintErrors(pkgs) > 0 {
		os.Exit(1)
	}

	pkg := pkgs[0]

	scope := pkg.Types.Scope()

	f := jen.NewFilePathName(pkg.PkgPath, pkg.Name)
	f.HeaderComment("Code generated by schemagen. DO NOT EDIT.")

	for _, name := range names {
		obj := scope.Lookup(name)
		if obj == nil {
			log.Fatalf("unknown type: %s\n", name)
		}

		err = handleObject(f, obj.Type().(*types.Named))
		if err != nil {
			log.Fatalln(err)
		}
	}

	err = f.Save(env.Output())
	if err != nil {
		log.Fatalln(err)
	}
}

func handleObject(f *jen.File, named *types.Named) error {
	return genValidate(f, named)
}
